version: "3"
# 一、容器内连接宿主机相关服务
# 1.liunx宿主机执行ifconfig docker0/ 得到inet就是要连接的ip地址
# -- windows宿主机需要配置路由: https://blog.csdn.net/qq_33668030/article/details/102477820
# 2.根据第一步得到的ip地址进行容器与宿主机的连接
# 如果需要KAFUKA service, 那么则env中的DOCKER_CONNECT_IP需要按1/2步骤配置一下.

# 二、 目录和构建(需要的服务解开#)
# services目录用于管理构建时所需的容器配置文件(conf/ini), 管理部分dockerfile.
# data目录保留部分存储型应用的数据, 如果想要复用MY/RD的数据库, 记得把DATA目录备份了。
# logs目录保存日志, 并且volumes需要处理好各个容器的log。
# www录用于部分WEB/通信引擎容器将项目关联进去运行。
# 构建过程: 
# Windows下CD到本项目根目录
# docker compose up --build -- 不使用缓存重新构建镜像并运行容器
# docker-compose up  -- 构建所有镜像并运行容器
# docker-compose up <指定的服务名> <指定的服务名> <指定的服务名> --构建部分并运行
# docker-compose up --force-recreate --no-deps -d <指定的服务名>  --重新构建并运行

# 三、关于安装拓展等内容其余部分查看Readme

services:
#  # NGINX一般不推荐在容器中运行, 代理和网络多一层比较麻烦, 如果所在环境不支持NGINX特定版本安装则可以考虑
#  nginx:
#    # 需要启动其他版本的PHP，比如PHP5.4，那就先在docker-compose.yml文件中删除PHP5.4前面的注释，再启动PHP5.4容器。
#    # PHP5.4启动后，打开Nginx 配置，修改fastcgi_pass的主机地址，由php改为php54, 最后，重启 Nginx 生效。
#    build:
#      context: ./services/nginx
#      args:
#        NGINX_VERSION: nginx:${NGINX_VERSION}
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        NGINX_INSTALL_APPS: ${NGINX_INSTALL_APPS}
#    container_name: nginx
#    ports:
#      - "${NGINX_HTTP_HOST_PORT}:80"
#      - "${NGINX_HTTPS_HOST_PORT}:443"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${NGINX_SSL_CERTIFICATE_DIR}:/ssl:rw
#      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
#      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
#      - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
#      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
#      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
#    environment:
#      TZ: "$TZ"
#    networks:
#      - default

#  openresty:
#    image:  openresty/openresty:${OPENRESTY_VERSION}
#    container_name: openresty
#    ports:
#       - "${OPENRESTY_HTTP_HOST_PORT}:80"
#       - "${OPENRESTY_HTTPS_HOST_PORT}:443"
#    volumes:
#       - ${SOURCE_DIR}:/www/:rw
#       - ${OPENRESTY_CONFD_DIR}:/etc/nginx/conf.d/:ro
#       - ${OPENRESTY_SSL_CERTIFICATE_DIR}:/ssl:rw
#       - ${OPENRESTY_CONF_FILE}:/usr/local/openresty/nginx/conf/nginx.conf:ro
#       - ${OPENRESTY_FASTCGI_PHP_CONF}:/usr/local/openresty/nginx/conf/fastcgi-php.conf:ro
#       - ${OPENRESTY_CONF_FASTCGIPARAMS_FILE}:/usr/local/openresty/nginx/conf/fastcgi_params:ro
#       - ${OPENRESTY_LOG_DIR}:/var/log/nginx/:rw
#    environment:
#      TZ: "$TZ"
#    networks:
#      - default

#  # NODE一般不推荐容器中运行, 切换版本和安装都简单, 没必要...
#  node:
#    image: node:${NODE_VERSION}
#    environment:
#      - NODE_ENV=production
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#    expose:
#      - "8081"
#    networks:
#      - default
#    stdin_open: true
#    tty: true

#  PHP多版本管理: 常用版本php(7.4)-swoole php5.6-fpm php7.1.12-fpm php8.0-fpm  ************************************
  ## 1、 PHP + PHPFPM 一体化镜像  拓展开启依赖env-PHP_EXTENSIONS  重新build PHP镜像:docker-compose build php
  ## 2、基于swoole的框架的运行容器搭建, 放入localhost目录后执行进入容器执行即可。
#  php_swoole:
#    container_name: php_swoole
#    build:
#      context: ./services/php_swoole
#      args:
#        # PHP在构建镜像中固定7.4, 使用hyperf/hyperf:7.4-alpine-v3.14-base
#        SWOOLE_VERSION: ${SWOOLE_VERSION}
#        SWOOLE_PHP_COMPOSER_VERSION: ${SWOOLE_PHP_COMPOSER_VERSION}
#        TZ: "$TZ"
#    # stdin_open / tty 交互式进行, 进入后再根据需要编辑容器/操作特定项目/行为, 防止无常驻自动退出
#    stdin_open: true
#    tty: true
#    ports:
#      # 9501 用于swoole等网络框架
#      - "${SWOOLE_PHP_PORTS}:9501"
#    volumes:
#      - ${SOURCE_DIR}:/opt/www/:rw
#      - ${SWOOLE_PHP_PHP_CONF_FILE}:/etc/php7/php.ini:ro
#      - ${SWOOLE_PHP_LOG_DIR}:/var/log/php
#    networks:
#      - default
#    entrypoint: ['/bin/bash']

#  php56:
#    container_name: php56
#    build:
#      context: ./services/php56
#      args:
#        PHP_VERSION: php:${PHP56_VERSION}-fpm-alpine
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP56_EXTENSIONS}
#        TZ: "$TZ"
#    ports:
#      - "${PHP56FPM_PORTS}:9000"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP56_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP56_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP56_LOG_DIR}:/var/log/php
#      - ${DATA_DIR}/composer:/tmp/composer
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

#  php71:
#    container_name: php71
#    build:
#      context: ./services/php71
#      args:
#        PHP_VERSION: php:${PHP71_VERSION}-fpm-alpine
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP71_EXTENSIONS}
#        TZ: "$TZ"
#    ports:
#      - "${PHP71FPM_PORTS}:9000"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP71_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP71_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP71_LOG_DIR}:/var/log/php
#      - ${DATA_DIR}/composer:/tmp/composer
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

#  php80:
#    build:
#      context: ./services/php80
#      args:
#        PHP_VERSION: php:${PHP80_VERSION}-fpm-alpine3.13
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP80_EXTENSIONS}
#        TZ: "$TZ"
#    container_name: php80
#    ports:
#      - "${PHP80FPM_PORTS}:9000"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP80_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP80_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP80_LOG_DIR}:/var/log/php
#      - ${DATA_DIR}/composer:/tmp/composer
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

#  ## ************************************ MYSQL相关和管理
#  mysql8:
#    image: mysql:${MYSQL_VERSION}
#    container_name: mysql
#    ports:
#      - "${MYSQL_HOST_PORT}:3306"
#    volumes:
#      - ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
#      - ${DATA_DIR}/mysql:/var/lib/mysql/:rw
#    restart: always
#    networks:
#      - default
#    environment:
#      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
#      TZ: "$TZ"

  ## 相关的密码在_PASSWORD项中
  mysql5:
    image: biarms/mysql:${MYSQL5_VERSION}
    container_name: mysql5
    ports:
      - "${MYSQL5_HOST_PORT}:3306"
    volumes:
      - ${MYSQL5_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${DATA_DIR}/mysql5:/var/lib/mysql/:rw
    restart: always
    networks:
      - default
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL5_ROOT_PASSWORD}"
      TZ: "$TZ"

  ## MYSQL管理界面
  mysql-phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: mysql-phpmyadmin
    ports:
      - "${PHPMYADMIN_HOST_PORT}:80"
    volumes:
      - ${PHPMYADMIN_USER_CONF_FILE}:/etc/phpmyadmin/config.user.inc.php:ro
      - ${PHPMYADMIN_PHP_CONF_FILE}:/usr/local/etc/php/conf.d/php-phpmyadmin.ini:ro
    networks:
      - default
    restart: always
    environment:
      - UPLOAD_LIMIT=${PHPMYADMIN_UPLOAD_LIMIT}
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - TZ=$TZ
#  ## ************************************ 缓存库相关和管理
  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    ports:
      - "${REDIS_HOST_PORT}:6379"
    volumes:
      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
      - ${DATA_DIR}/redis:/data/:rw
    restart: always
    entrypoint: ["redis-server", "/etc/redis.conf"]
    environment:
      TZ: "$TZ"
    networks:
      - default

  redis-phpredisadmin:
    image: erikdubbelboer/phpredisadmin:latest
    container_name: redis-phpredisadmin
    ports:
      - "${REDISMYADMIN_HOST_PORT}:80"
    networks:
      - default
    restart: always
    environment:
      - REDIS_1_HOST=redis
      - REDIS_1_PORT=6379
      - TZ=$TZ

  mongodb:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb
    environment:
        MONGO_INITDB_ROOT_USERNAME: "${MONGODB_INITDB_ROOT_USERNAME}"
        MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_INITDB_ROOT_PASSWORD}"
        TZ: "$TZ"
    volumes:
      - ${DATA_DIR}/mongo:/data/db:rw
      - ${DATA_DIR}/mongo_key:/mongo:rw
    ports:
      - "${MONGODB_HOST_PORT}:27017"
    networks:
      - default
    command:
      --auth


  # mongodb的管控界面
  mongodb-adminmongo:
    image: mrvautin/adminmongo
    container_name: mongodb-adminmongo
    ports:
      - "${ADMINMONGO_HOST_PORT}:1234"
    environment:
      - HOST=0.0.0.0
      - DB_HOST=mongodb
      - DB_PORT=27017
    networks:
      - default

#  memcached:
#    image: memcached:${MEMCACHED_VERSION}
#    container_name: memcached
#    ports:
#      - "${MEMCACHED_HOST_PORT}:11211"
#    environment:
#       MEMCACHED_CACHE_SIZE: "${MEMCACHED_CACHE_SIZE}"
#    networks:
#      - default


#  ## ************************************ 消息队列相关和管理
#  rabbitmq:
#    build:
#      context: ./services/rabbitmq
#      args:
#        RABBITMQ_VERSION: ${RABBITMQ_VERSION}
#        RABBITMQ_PLUGINS: ${RABBITMQ_PLUGINS}
#    container_name: rabbitmq
#    restart: always
#    ports:
#      - "${RABBITMQ_HOST_PORT_C}:5672"
#      - "${RABBITMQ_HOST_PORT_S}:15672"
#    environment:
#       TZ: "$TZ"
#       RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
#       RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
#    networks:
#          - default

  ## 镜像：kafka依赖的zooker
  zookeeper:
    image: zookeeper:${ZOOKEEPER_VERSION}
    container_name: zookeeper
    ports: # 2000开头的端口在windows容易被应用占用
      - "${ZOOKEEPER_PORT}:2181"
    volumes:
      - ${LOG_DIR}/zookeeper:/datalog
      - ${DATA_DIR}/zookeeper:/data
    networks:
      - default

  ## 镜像：kafka https://hub.docker.com/r/wurstmeister/kafka/tags
  ## 节点1 -- 可配置多个节点
  kafka:
    image: wurstmeister/kafka:${KAFKA_VERSION}
    container_name: kafka
    depends_on:
      - zookeeper
    volumes:
      - ${DATA_DIR}/kafka/localtime:/etc/localtime
      - ${LOG_DIR}/kafka:/kafka/logs
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      # kafka的broker将监听地址表，只有与该ip匹配正确的客户端能成功连接到kafka
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      # 指向Broker的可用地址列表，kafka 将会在初始连接时将地址发送给client
      # DOCKER_CONNECT_IPkafka基于宿主机ip与zooker通信
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${DOCKER_CONNECT_IP}:${KAFKA_PORT}
      KAFKA_ADVERTISED_HOST_NAME: ${DOCKER_CONNECT_IP}
      KAFKA_ZOOKEEPER_CONNECT: ${DOCKER_CONNECT_IP}:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_PORT: ${KAFKA_PORT}
      KAFKA_LOG_DIRS: "/kafka/logs"
    networks:
      - default

  ## 镜像：开源的web管理kafka集群的界面
  ## 访问web界面 add cluster 输入 KAFKA_ZOOKEEPER_CONNECT 进行连接获取kafuka信息
  kafka-manager:  
    image: sheepkiller/kafka-manager
    container_name: kafka-manager
    environment:
        ZK_HOSTS: zookeeper
    ports:
      - "${KAFKAMANAGER_PORT}:9000"
    networks:
      - default

#  ## ************************************ ES和ELK相关和管理
  # ES 相关应用搭建
  elasticsearch-cerebro:
    image: lmenezes/cerebro
    container_name: elasticsearch-cerebro
    ports:
      - "${CEREBRO_PORT}:9000"
    networks:
      - default
    environment:
      TZ: "$TZ"

  elasticsearch-elastichd:
    image: containerize/elastichd
    container_name: elasticsearch-elastichd
    ports:
      - "${ELASTICHD_PORT}:9800"
    networks:
      - default
    environment:
      TZ: "$TZ"

#  # ELK相关
#  elasticsearch:
#    build:
#      context: ./services/elasticsearch
#      args:
#        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
#        ELASTICSEARCH_PLUGINS: ${ELASTICSEARCH_PLUGINS}
#    container_name: elasticsearch
#    environment:
#      - TZ=$TZ
#      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    volumes:
#      - ${DATA_DIR}/esdata:/usr/share/elasticsearch/data
#      - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
#    hostname: elasticsearch
#    restart: always
#    ports:
#      - "${ELASTICSEARCH_HOST_PORT_C}:9200"
#      - "${ELASTICSEARCH_HOST_PORT_S}:9300"

#  kibana:
#    image: kibana:${KIBANA_VERSION}
#    container_name: kibana
#    environment:
#      TZ: "$TZ"
#      elasticsearch.hosts: http://elasticsearch:9200
#      I18N_LOCALE: "${KIBANA_I18N_LOCALE}"
#    hostname: kibana
#    depends_on:
#      - elasticsearch
#    restart: always
#    ports:
#      - "${KIBANA_HOST}:5601"

#  logstash:
#    image: logstash:${LOGSTASH_VERSION}
#    container_name: logstash
#    hostname: logstash
#    restart: always
#    depends_on:
#      - elasticsearch
#    environment:
#      TZ: "$TZ"
#    ports:
#      - "${LOGSTASH_HOST_PORT_C}:9600"
#      - "${LOGSTASH_HOST_PORT_S}:5044"

#  ## ************************************ supervisor相关和管理
#  # 应用状态统一管理工具, 拉起挂掉的应用, 开发环境不需像线上一样严格.. 不推荐使用
#  supervisor:
#    build:
#      context: ./services/supervisor
#      args:
#        ALPINE_VERSION: alpine:${ALPINE_VERSION}
#        TZ: "$TZ"
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#    container_name: supervisor
#    ports:
#      - "${SUPERVISOR_HOST_PORT_C}:9001"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${SUPERVISOR_LOG}:/var/log/supervisor/:rw
#      - ${SUPERVISOR_CONFIG}:/etc/supervisor/conf.d/:rw
#      - ${SUPERVISOR_CONF_FILE}:/etc/supervisor/supervisord.conf:ro
#    command:
#      - /bin/sh
#      - -c
#      - |
#        supervisord -n -c /etc/supervisor/supervisord.conf
#    restart: always
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

networks:
  default:
